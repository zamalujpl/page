---
import BaseLayout from "../../layouts/BaseLayout.astro";
import assets from "../../assets.json";

import IndexTemplate from "../../templates/IndexTemplate.astro";

export async function getStaticPaths() {
  const paths = [];
  for (const [catKey, cat] of Object.entries(assets)) {
    paths.push({
      params: { category: catKey },
      props: {
        category: catKey,
      },
    });
  }
  return paths;
}

/** @typedef {{ key: string; file: string; description?: string; width?: number; height?: number }} ImageItem */
/** @typedef {{ title_key?: string; description?: string; header?: string; items: ImageItem[] }} Category */

/** @param {string} s */
function capitalize(s) {
  return s
    .replace(/_/g, " ")
    .replace(/\b\w/g, (/** @type {string} */ l) => l.toUpperCase());
}

/** @param {string} k @returns {Category} */
function getCategorySafe(k) {
  return /** @type {any} */ (assets)[k];
}

const { category } = Astro.props;
const cat = getCategorySafe(/** @type {string} */ (category));
const title = cat.title_key ? capitalize(cat.title_key) : capitalize(category);

/** @type {ImageItem[]} */
const imageItems = /** @type {any} */ (cat.items);

/** @param {ImageItem} item */
function toCard(item) {
  return {
    href: `/${category}/${item.key}`,
    imgSrc: `/${item.file}`,
    imgAlt: item.description ?? item.key,
    title: item.key,
    buttonText: "Zobacz",
    description: item.description ?? cat.description,
  };
}

const items = imageItems.map(toCard);
---

<BaseLayout title={title} description={cat.description} bodyClass="bg-base-200">
  <main class="flex-1 flex flex-col pt-0 bg-base-200 min-h-0">
    <IndexTemplate
      items={items}
      headerImgSrc={cat.header
        ? `/${cat.header.replace(/\.[^/.]+$/, "")}.png`
        : undefined}
      headerImgAlt={cat.header ? `${title} header` : undefined}
    />
  </main>
  <script is:inline>
    trackEvent();
  </script>
</BaseLayout>
